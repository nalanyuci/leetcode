Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

-------------------------------------------------------------------------------------------------------------------------

* 1.my version:
//4ms, 94.93%

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func maxDepth(root *TreeNode) int {
    left,right := 0,0
    if root == nil {
        return 0
    }
    if root.Left == nil && root.Right == nil {
        return 1
    }
    if root.Left != nil {
        left = maxDepth(root.Left)+1
    }
    if root.Right != nil {
        right = maxDepth(root.Right)+1
    }
    if left > right {
        return left
    } else {
        return right
    }
}

it can be simplified to...
//0ms, 100%
func maxDepth(root *TreeNode) int {
    if root == nil {
        return 0
    }
    left := maxDepth(root.Left) + 1
    right := maxDepth(root.Right) + 1
    if left > right {
        return left
    } else {
        return right
    }
}