Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.

Example:

n = 15,

Return:
[
    "1",
    "2",
    "Fizz",
    "4",
    "Buzz",
    "Fizz",
    "7",
    "8",
    "Fizz",
    "Buzz",
    "11",
    "Fizz",
    "13",
    "14",
    "FizzBuzz"
]

-------------------------------------------------------------------------------------------------------------------------

* 1.my Go version :
//171ms 91.14%
//use "0 == i % 15" not "i % 15 == 0", the time will be very very short!!!

func fizzBuzz(n int) []string {
    result := make([]string,0)
    for i := 1 ; i <= n ; i++ {
        if 0 == i % 15 {
            result = append(result,"FizzBuzz")
        } else if 0 == i % 5 {
            result = append(result,"Buzz")
        } else if 0 == i % 3 {
            result = append(result,"Fizz")
        } else {
            result = append(result,strconv.Itoa(i))
        }
    }
    return result
}

* 2.other java version :
//4ms

public class Solution {
    public List<String> fizzBuzz(int n) {
        List<String> ret = new ArrayList<String>(n);
        for(int i=1,fizz=0,buzz=0;i<=n ;i++){
            fizz++;
            buzz++;
            if(fizz==3 && buzz==5){
                ret.add("FizzBuzz");
                fizz=0;
                buzz=0;
            }else if(fizz==3){
                ret.add("Fizz");
                fizz=0;
            }else if(buzz==5){
                ret.add("Buzz");
                buzz=0;
            }else{
                ret.add(String.valueOf(i));
            }
        } 
        return ret;
    }
}

* 3.other C++ version :
//3ms

class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> ret_vec(n);
        for(int i=1; i<=n; ++i) {
            if(0 == i%3) {
                ret_vec[i-1] += "Fizz";
            }
            if(0 == i%5) {
                ret_vec[i-1] += "Buzz";
            }
            if(ret_vec[i-1].empty()) {
                ret_vec[i-1] += to_string(i);
            }
        }
        return ret_vec;
    }
};