In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one 
with different size but keep its original data.

You're given a matrix represented by a two-dimensional array, and two positive integers r and c representing 
the row number and column number of the wanted reshaped matrix, respectively.

The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; 
Otherwise, output the original matrix.

Example 1:
Input: 
	nums = 
	[[1,2],
	[3,4]]
	
	r = 1, c = 4
Output: 
	[[1,2,3,4]]
Explanation:
	The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.

Example 2:
Input: 
	nums = 
	[[1,2],
	[3,4]]
	
	r = 2, c = 4
Output: 
	[[1,2],
	[3,4]]
Explanation:
	There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.

Note:
The height and width of the given matrix is in range [1, 100].
The given r and c are all positive.


-------------------------------------------------------------------------------------------------------------------------

* 1.my Go version :
//105ms 90%

func matrixReshape(nums [][]int, r int, c int) [][]int {
    if nums == nil || len(nums)*len(nums[0]) != r*c {
        return nums
    }
    result := make([][]int,r)
    for i := range result {
        result[i] = make([]int, c)
    }
    posi , posj := 0 , 0
    for i := 0 ; i < r ; i++ {
        for j := 0 ; j < c ; j++ {
            result[i][j] = nums[posi][posj]
            posj++
            if posj == len(nums[0]){
                posj = 0
                posi++
            }     
        }
    }
    return result
}

* 2.other Go version :
//666

func matrixReshape(nums [][]int, r int, c int) [][]int {
	if len(nums) == 0 || len(nums[0]) == 0 { // one of dimension is 0
		return nums
	}
	if r*c != len(nums)*len(nums[0]) { // number of element not match
		return nums
	}
	orginialC := len(nums[0])
	ret := [][]int{}
	for index := 0; index < r*c; index++ {
		fromR := index / orginialC
		fromC := index % orginialC
		toR := index / c
		if toR >= len(ret) {
			ret = append(ret, []int{})
		}
		ret[toR] = append(ret[toR], nums[fromR][fromC])
	}
	return ret
}

* 3.other java version :
//same to 2
//but java is so convenient!!!

public int[][] matrixReshape(int[][] nums, int r, int c) {
    int n = nums.length, m = nums[0].length;
    if (r*c != n*m) return nums;
    int[][] res = new int[r][c];
    for (int i=0;i<r*c;i++) 
        res[i/c][i%c] = nums[i/m][i%m];
    return res;
}

* 4.other c++ version:
//two loops with different thought

class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        int m = nums.size(), n = nums[0].size();
        if (m * n != r * c) {
            return nums;
        }

        vector<vector<int>> res(r, vector<int>(c, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int k = i * n + j;
                res[k / c][k % c] = nums[i][j];
            }
        }

        return res;
    }
};