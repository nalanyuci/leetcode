Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
    Given nums = [2, 7, 11, 15], target = 9,

    Because nums[0] + nums[1] = 2 + 7 = 9,
    return [0, 1].



1.Go version:
//new 
//use hash map
//12ms 58.72%

func twoSum(nums []int, target int) []int {
    hash_map := make(map[int]int)
    result := make([]int,2)
    for i := range nums {
        if v,ok := hash_map[nums[i]]; ok{
            if i >v {
                result[0] = v
                result[1] = i
            } else {
                result[0] = i
                result[1] = v
            }
            break
        } else {
            hash_map[target-nums[i]] = i
        }
    }
    return result
}


2.My solution(C++) :
//最容易想到的版本，但是耗时多
//123 ms  32.6%

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int i = 0 , j = 0 ;
        for(i = 0 ; i < nums.size() ; i++){
            for(j = i + 1 ; j < nums.size() ; j++){
                if( nums[i] + nums[j] == target)
                    break ;
            }
            if(j < nums.size())
               break ; 
        }

        return vector<int>{i,j} ;
    }
};


3.other version(C++) :
//9ms 54.74%

vector<int> twoSum(vector<int> &numbers, int target)
{
	//Key is the number and value is its index in the vector.
	unordered_map<int, int> hash;
	vector<int> result;
	for (int i = 0; i < numbers.size(); i++) {
		int numberToFind = target - numbers[i];

		//if numberToFind is found in map, return them
		if (hash.find(numberToFind) != hash.end()) {

			result.push_back(hash[numberToFind]);
			result.push_back(i);			
			return result;
		}

		//number was not found. Put it in the map.
		hash[numbers[i]] = i;
	}
	return result;
}


4.other version(C++) :
//hash table ，自己撰写
//13ms 44.89%
//与3类似，但没有3耗时短
//使用unordered_map ， 可达到3一样的耗时
/*
	map底层是红黑树实现的，因此它的find函数时间复杂度：O(logn)
	而unordered_map底层是哈希表,因此它的find函数时间复杂度：O(l)
*/

vector<int> twoSum(vector<int> &numbers, int target)
{
	map<int,int> numAndIndex ;
	for(int i = 0 ; i < numbers.size() ; i++){
		int num = target - numbers[i] ;
		map<int , int>::iterator it = numAndIndex.find(num) ;
		if(it != numAndIndex.end())
			return vector<int>{it->second , i} ;
		numAndIndex.insert(pair<int,int>(numbers[i] , i)) ;
	}
}
