The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 2^31.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.

-------------------------------------------------------------------------------------------------------------------------

* 1.my Go version :
//0ms , 18.92%

func hammingDistance(x int, y int) int {
	num1 , num2 := x , y
	count := 0
	for i := 0 ; num1 != 0 || num2 != 0 ; i++ {
		if num1%2 != num2%2 {
		    count = count + 1
		}
		num1 = num1>>1
		num2 = num2>>1
	}
	return count
}


* 2. XOR version :
//use &1 , get last bit of a number
//use ^ , get whether two bits are different . same , 0 ; different , 1 .
//use >>, get the rest number when remove last bit of a number . n>>1 is same as n/2 .

func hammingDistance(x int, y int) int {
	num1 , num2 := x , y
	count := 0
	for i := 0 ; num1 != 0 || num2 != 0 ; i++ {
		temp := (num1 & 1)^(num2 & 1)
		count = count + temp
		num1 = num1>>1
		num2 = num2>>1
	}
	return count
}