Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Follow up: Recursive solution is trivial, could you do it iteratively?

-------------------------------------------------------------------------------------------------------------------------

* 1.my version:
//0ms, 100%

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func inorderTraversal(root *TreeNode) []int {
    result := make([]int,0)
    if root == nil {
        return nil
    }
    result = append(result,inorderTraversal(root.Left)...)
    result = append(result,root.Val)
    result = append(result,inorderTraversal(root.Right)...)
    return result
}

* 2.other java version:

Here's my iterative solution.

I use pushAllLeft() to push all the left children of one Node into the stack, so that my idea looks clear:

1.We push all the left children of root into the stack until there's no more nodes.
2.Then we pop from the stack which we'd call cur.
3.Add cur to result list
4.Recursively call pushAllLeft() on cur's right child.

Below is my Java code.

public List<Integer> inorderTraversal2(TreeNode root) {
    List<Integer> res = new ArrayList<>();
    if (root == null) return res;

    Stack<TreeNode> stack = new Stack<>();
    pushAllLeft(root, stack);
    while (!stack.isEmpty()) {
        TreeNode cur = stack.pop();
        res.add(cur.val);
        pushAllLeft(cur.right, stack);
    }
    return res;
}

public void pushAllLeft(TreeNode node, Stack stack){
    while (node != null) {
        stack.add(node);
        node = node.left;
    }
}

* 3.other c++ version:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //vector<int> result ;
    vector<int> inorderTraversal(TreeNode* root) {
        /*if( root ) {
			inorderTraversal(root->left);
			result.push_back(root->val) ;
			inorderTraversal(root->right);
		}
		return result ;*/

		vector<int> result ;
		if( !root )
			return vector<int>() ;
		stack<TreeNode*> s ;
		TreeNode *node = root ;
		while ( node )  {
			while ( node )	{
				s.push(node) ;
				node = node->left ;
			}
			while( node == NULL && !s.empty() )  {
				node = s.top() ;
				s.pop() ;
				result.push_back(node->val) ;
				node = node->right ;
			}
		}
		return result ;
    }
};


----------------------------------------------------------
Explanation

The basic idea is referred from here: using stack to simulate the recursion procedure: for each node, travel to its left child until it's left leaf, then pop to left leaf's higher level node A, and switch to A's right branch. Keep the above steps until cur is null and stack is empty. As the following:

Runtime = O(n): As each node is visited once

Space = O(n)

public List<Integer> inorderTraversal(TreeNode root) {
	List<Integer> res = new LinkedList<Integer>();
	if (root == null) return res;
	
	Stack<TreeNode> stack = new Stack<TreeNode>();
	TreeNode cur = root;
	while (cur != null || !stack.isEmpty()) { 
		while (cur != null) {// Travel to each node's left child, till reach the left leaf
			stack.push(cur);
			cur = cur.left;				
		}		 
		cur = stack.pop(); // Backtrack to higher level node A
		res.add(cur.val);  // Add the node to the result list
		cur = cur.right;   // Switch to A'right branch
	}
	return res;
}