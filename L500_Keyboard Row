Given a List of words, return the words that can be typed using letters of alphabet on only one row's 
of American keyboard like the image below.

American keyboard

Example 1:
Input: ["Hello", "Alaska", "Dad", "Peace"]
Output: ["Alaska", "Dad"]

Note:
You may use one character in the keyboard more than once.
You may assume the input string will only contain letters of alphabet.

-------------------------------------------------------------------------------------------------------------------------

* 1.my Go version :
//0ms  4.65%

func findMap(sUpper string, i int , m1 map[string]int, m2 map[string]int, m3 map[string]int) int {
    if _, ok1 := m1[string(sUpper[i])]; ok1 {
        return 1
    } else if _, ok2 := m2[string(sUpper[i])]; ok2 {
        return 2
    } else {
        return 3
    }
}

func findWords(words []string) []string {
    result := make([]string,0)
    line1 := map[string]int {
        "Q":1, "W":2, "E":3, "R":4, "T":5, "Y":6, "U":7, "I":8, "O":9, "P":10,
    }
    line2 := map[string]int{
        "A":1, "S":2, "D":3, "F":4, "G":5, "H":6, "J":7, "K":8, "L":9,
    }
    line3 := map[string]int{
        "Z":1, "X":2, "C":3, "V":4, "B":5, "N":6, "M":7,
    }
    for i := range words {
        sUpper := strings.ToUpper(words[i])
        line := findMap(sUpper,0,line1,line2,line3)
        flag := 0
        for j := 1 ; j < len(sUpper) ; j++ {
            if temp := findMap(sUpper,j,line1,line2,line3) ; temp != line {
                flag = 1
                break ;
            }
        }
        if flag == 0 {
            result = append(result,words[i])
        }
    }
    return result
}

* 2.other java version :

public class Solution {
    public String[] findWords(String[] words) {
        String[] strs = {"QWERTYUIOP","ASDFGHJKL","ZXCVBNM"};
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i<strs.length; i++){
            for(char c: strs[i].toCharArray()){
                map.put(c, i);//put <char, rowIndex> pair into the map
            }
        }
        List<String> res = new LinkedList<>();
        for(String w: words){
            if(w.equals("")) continue;
            int index = map.get(w.toUpperCase().charAt(0));
            for(char c: w.toUpperCase().toCharArray()){
                if(map.get(c)!=index){
                    index = -1; //don't need a boolean flag. 
                    break;
                }
            }
            if(index!=-1) res.add(w);//if index != -1, this is a valid string
        }
        return res.toArray(new String[0]);
    }
}

* 3.other C++ version :
/*
The idea is simple. Define a mask flag for each row. In my implementation, 
I define the flag for Row 1 (“QWERTYUIOP”) as 1 (001), Row 2 (“ASDFGHJKL”) as 2 (010), Row 3 (“ZXCVBNM”) as 4 (100).
For each word, us 7 (111) as base, do AND operation on each character. 
If all chars from same row, the final result will be one of (1, 2, 4). 
If any character from other row, the final result will be 0.
*/

class Solution {
public:
    vector<string> findWords(vector<string>& words) {
        vector<int> dict(26);
        vector<string> rows = {"QWERTYUIOP", "ASDFGHJKL", "ZXCVBNM"};
        for (int i = 0; i < rows.size(); i++) {
            for (auto c : rows[i]) dict[c-'A'] = 1 << i;
        }
        vector<string> res;
        for (auto w : words) {
            int r = 7;
            for (char c : w) {
                r &= dict[toupper(c)-'A'];
                if (r == 0) break;
            }
            if (r) res.push_back(w);
        }
        return res;
    }
};

* 4.other java8 version :

public class Solution {
    public String[] findWords(String[] words) {
        String keyboardRegex = "[qwertyuiop]*|[asdfghjkl]*|[zxcvbnm]*";
        return Stream.of(words)
            .filter(word -> word.toLowerCase().matches(keyboardRegex))
            .toArray(String[]::new);
    }
}