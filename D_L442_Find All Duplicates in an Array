Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements that appear twice in this array.

Could you do it without extra space and in O(n) runtime?

Example:
Input:
[4,3,2,7,8,2,3,1]

Output:
[2,3]

-------------------------------------------------------------------------------------------------------------------------

* 1.my Go version reference to others' thought:
//1203ms  57.14%
/******************************************************************
[4,3,2,7,8,2,3,1]
0 : nums[3] = -7  [4,3,2,-7,8,2,3,1]     nums[3]
1 : nums[2] = -2  [4,3,-2,7,8,2,3,1]     nums[2]
2 : nums[1] = -3  [4,-3,-2,7,8,2,3,1]    nums[1]
3 : nums[6] = -3  [4,-3,-2,7,8,2,-3,1]   nums[6]
4 : nums[7] = -1  [4,-3,-2,7,8,2,-3,-1]  nums[7]
5 : nums[1] = 3   [4,3,-2,7,8,2,-3,-1]   nums[1]  Abs(nums[5]) = 2
6 : nums[2] = 2   [4,3,2,7,8,2,-3,-1]    nums[2]  Abs(nums[6]) = 3
7 : nums[0] = -4  [-4,3,2,7,8,2,-3,-1]   nums[0]
*******************************************************************/

func Abs(x int) int {
    if x < 0 {
        return -x
    }
    return x
}
func findDuplicates(nums []int) []int {
    result := make([]int,0)
    for i := range nums {
        nums[Abs(nums[i])-1] = -nums[Abs(nums[i])-1]
        if nums[Abs(nums[i])-1] > 0 {
            result = append(result,Abs(nums[i]))
        }
    }
    return result
}

* 2.other java version :
The main idea is to use the index and negative sign to indicate if a number exists, 
because index range [0, n - 1] can represents number range [1, n]

// [4, 3, 2, 7, 8, 2, 3, 1]
// [4, 3, 2, -7, 8, 2, 3, 1]
// [4, -3, -2, -7, 8, 2, 3, 1]
// [4, -3, -2, -7, 8, 2, -3, 1]
// [4, -3, -2, -7, 8, 2, -3, -1]
// [4, -3, -2, -7, 8, 2, -3, -1] add 2
// [4, -3, -2, -7, 8, 2, -3, -1] add 3
// [-4, -3, -2, -7, 8, 2, -3, -1]

class Solution {
    
	public List<Integer> findDuplicates(int[] nums) {
		List<Integer> res = new ArrayList<Integer>();

		  for(int i = 0; i < nums.length; i++) {
			int curNum = Math.abs(nums[i]);
			
			if(nums[curNum - 1] < 0) res.add(curNum);
			else nums[curNum - 1] = - nums[curNum - 1];
		  }
		
		  return res;
    }
}

* 3.other Go version :

func findDuplicates(nums []int) []int {
    l := len(nums)
    for i := 0; i < l; i++ {
        if nums[i] != nums[nums[i]-1] {
            temp := nums[nums[i]-1]
            nums[nums[i]-1] = nums[i]
            nums[i] = temp
            i--
        }
    }
    res := make([]int,0,5)
    for i := 0; i < l; i++ {
        if nums[i] != i+1 {
            res = append(res, nums[i])
        }
    }
    return res
}

* 4.other Go version :

func findDuplicates(nums []int) []int {
    length := len(nums)
    for i := 0; i < len(nums); i += 1 {
        convNum := convertNumber(i+1, length)
        val := findOriginalValue(nums[i], convNum, length)
        nums[val-1] = nums[val-1] + convertNumber(val, length)
        nums[i] = nums[i] - val
    }
    
    res := make([]int, 0)
    for j := 0; j < length; j += 1 {
        if nums[j] - convertNumber(j+1, length) > 0 {
            res = append(res, j+1)
        }
    }
    return res
}

func findOriginalValue(val, convNum, length int) int {
    for val > length {
        val -= convNum
    }
    return val
}

func convertNumber(num, length int) int {
    return length + 1 + num
}