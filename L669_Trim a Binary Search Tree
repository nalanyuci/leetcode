Given a binary search tree and the lowest and highest boundaries as L and R, 
trim the tree so that all its elements lies in [L, R] (R >= L). 
You might need to change the root of the tree, 
so the result should return the new root of the trimmed binary search tree.

Example 1:
Input: 
    1
   / \
  0   2

  L = 1
  R = 2

Output: 
    1
      \
       2

Example 2:
Input: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3

Output: 
      3
     / 
   2   
  /
 1

-------------------------------------------------------------------------------------------------------------------------

* 1.my Go version :
//31ms 44%
//目的就是对tree进行trim，所以就是要以root返回trim后的tree，不应该多余保存原有tree。
  虽然无用node并没被delete掉。。。

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findNodeVal(root *TreeNode, L int, R int) (resultRoot *TreeNode){
    if root != nil {
        if root.Val < L {
            resultRoot = findNodeVal(root.Right,L,R)
        } else if root.Val > R {
            resultRoot = findNodeVal(root.Left,L,R)
        } else {
            resultRoot = root
            resultRoot.Left = findNodeVal(root.Left,L,R)
            resultRoot.Right = findNodeVal(root.Right,L,R)
        }
    }
    return
}

func trimBST(root *TreeNode, L int, R int) *TreeNode {
    var resultRoot *TreeNode
    resultRoot = findNodeVal(root,L,R)
    return resultRoot
}

* 2.other Go version :

func trimBST(root *TreeNode, L int, R int) *TreeNode {
    if root != nil {
        if root.Val < L {
            root = trimBST(root.Right,L,R)
        } else if root.Val > R {
            root = trimBST(root.Left,L,R)
        } else {
            root.Left = trimBST(root.Left,L,R)
            root.Right = trimBST(root.Right,L,R)
        }
    }
    return root
}