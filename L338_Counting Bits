Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num 
calculate the number of 1's in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

1.It is very easy to come up with a solution with run time O(n*sizeof(integer)). 
But can you do it in linear time O(n) /possibly in a single pass?
2.Space complexity should be O(n).
3.Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

-------------------------------------------------------------------------------------------------------------------------

* 1.my Go version:
//2672ms  47.22%
//不满足时间复杂度O(n)的要求，参考version3，是另一种计算一个二进制数有几个1的方法，在剑指offer上有这道题。。。

func countBit(num int) int {
    count := 0
    for ; num > 0 ; {
        count = count + num & 1
        num = num >> 1
    }
    return count
}

func countBits(num int) []int {
    result := make([]int,0)
    for i := 0 ; i <= num ; i++ {
        result = append(result , countBit(i))
    }
    return result
}

* 2.other java version:
// An easy recurrence for this problem is f[i] = f[i / 2] + i % 2.
/*
Take number X for example, 10011001.
Divide it in 2 parts:
<1>the last digit ( 1 or 0, which is " i&1 ", equivalent to " i%2 " )
<2>the other digits ( the number of 1, which is " f[i >> 1] ", equivalent to " f[i/2] " )
*/

public int[] countBits(int num) {
    int[] f = new int[num + 1];
    for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);
    return f;
}

* 3.other C++ version:
// i&(i-1) 结果是i的最后一个1之前的部分（保持不变），这个1所在位置及之后位置填充为0.
// 最后一个1的后面，要么没有要么都是0.
// 其实得到的就是，i和i-1的相同部分，而这个相同部分的1的总数，比i少1.

/*
 when you remove the lowest set bit (or the rightmost non-zero bit), 
 you will arrive at a smaller number than the current number: 14(1110) ==> 12(1100). 
 Since your computed series already includes all the counts for n=0,1,2,…,12,13, 
 you will most certainly already have the count for the number 12. 
 The only difference in count between 14, and 12 is 1 bit, 
 so you add 1 to the count for 12 and get the correct count for 14.

Example:
 if i = 14(1110) , i-1 = 13(1101), i&(i-1)) = 1100
 add 1 to 1100 is 1110
*/

class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> ret(num+1, 0);
        for (int i = 1; i <= num; ++i)
            ret[i] = ret[i&(i-1)] + 1;
        return ret;
    }
};


//这个版本主要用到了另一种计算二进制数中1个数的方法。
//不断清除n的二进制表示中最右边的1，同时累加计数器，直至n为0。

int bitCount(unsigned int n) {
    unsigned int c = 0 ;
    for (c = 0 ; n ; ++c) {
        n &= (n - 1) ; // 清除最低位的1
    }
    return c ;
}

//Reference: https://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html